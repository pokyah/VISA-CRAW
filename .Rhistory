label = ~ paste(
"prediction:", format(round(spatialized.KR.sf$response, 2), nsmall = 2)),
# popup = ~as.character(response),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)
) %>%
#legend
leaflet::addLegend(
position = "bottomright", pal = tractionPal, values = ~response,
title = "traction",
group = "response",
opacity = 1
)
traction.map = leaflet::leaflet(spatialized.kr.sf) %>%
# basemaps
leaflet::addProviderTiles(group = "Satellite",
providers$Esri.WorldImagery,
options = providerTileOptions(opacity = 1)
) %>%
leaflet::addProviderTiles(group = "Stamen",
providers$Stamen.Toner,
options = providerTileOptions(opacity = 0.25)
) %>%
# centering the map
leaflet::fitBounds(sf::st_bbox(spatialized.KR.sf)[[1]],
sf::st_bbox(spatialized.KR.sf)[[2]],
sf::st_bbox(spatialized.KR.sf)[[3]],
sf::st_bbox(spatialized.KR.sf)[[4]]
) %>%
# adding layer control button
leaflet::addLayersControl(
baseGroups = c("Satellite","Stamen"),
# overlayGroups = c("prediction"),
overlayGroups = c("response"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# fullscreen button
leaflet.extras::addFullscreenControl() %>%
# location button
leaflet::addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
$('head').append(",responsiveness,");
}")
) %>%
# admin boundaries
# predictions
leaflet::addPolygons(
group = "response",
color = "#444444", stroke = FALSE, weight = 1, smoothFactor = 0.8,
opacity = 1.0, fillOpacity = 0.6,
fillColor = ~tractionPal(response),
label = ~ paste(
"prediction:", format(round(spatialized.kr.sf$response, 2), nsmall = 2)),
# popup = ~as.character(response),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)
) %>%
#legend
leaflet::addLegend(
position = "bottomright", pal = tractionPal, values = ~response,
title = "traction",
group = "response",
opacity = 1
)
traction.map = leaflet::leaflet(spatialized.kr.sf) %>%
# basemaps
leaflet::addProviderTiles(group = "Satellite",
providers$Esri.WorldImagery,
options = providerTileOptions(opacity = 1)
) %>%
leaflet::addProviderTiles(group = "Stamen",
providers$Stamen.Toner,
options = providerTileOptions(opacity = 0.25)
) %>%
# centering the map
leaflet::fitBounds(sf::st_bbox(spatialized.kr.sf)[[1]],
sf::st_bbox(spatialized.kr.sf)[[2]],
sf::st_bbox(spatialized.kr.sf)[[3]],
sf::st_bbox(spatialized.kr.sf)[[4]]
) %>%
# adding layer control button
leaflet::addLayersControl(
baseGroups = c("Satellite","Stamen"),
# overlayGroups = c("prediction"),
overlayGroups = c("response"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# fullscreen button
leaflet.extras::addFullscreenControl() %>%
# location button
leaflet::addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
$('head').append(",responsiveness,");
}")
) %>%
# admin boundaries
# predictions
leaflet::addPolygons(
group = "response",
color = "#444444", stroke = FALSE, weight = 1, smoothFactor = 0.8,
opacity = 1.0, fillOpacity = 0.6,
fillColor = ~tractionPal(response),
label = ~ paste(
"prediction:", format(round(spatialized.kr.sf$response, 2), nsmall = 2)),
# popup = ~as.character(response),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)
) %>%
#legend
leaflet::addLegend(
position = "bottomright", pal = tractionPal, values = ~response,
title = "traction",
group = "response",
opacity = 1
)
# to make the map responsive
responsiveness = "\'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\'"
# defining the color palette for traction
tractionPal = leaflet::colorNumeric(
palette = "RdYlBu", #"RdBl",
reverse = TRUE,
domain = spatialized.KR.sf$response, #spatialized$response,
na.color = "black"
)
# defining the color palette for traction
tractionPal = leaflet::colorNumeric(
palette = "RdYlBu", #"RdBl",
reverse = TRUE,
domain = spatialized.kr.sf$traction.kr, #spatialized$response,
na.color = "black"
)
spatialized.kr.sf$traction.kr
traction.map = leaflet::leaflet(spatialized.kr.sf) %>%
# basemaps
leaflet::addProviderTiles(group = "Satellite",
providers$Esri.WorldImagery,
options = providerTileOptions(opacity = 1)
) %>%
leaflet::addProviderTiles(group = "Stamen",
providers$Stamen.Toner,
options = providerTileOptions(opacity = 0.25)
) %>%
# centering the map
leaflet::fitBounds(sf::st_bbox(spatialized.kr.sf)[[1]],
sf::st_bbox(spatialized.kr.sf)[[2]],
sf::st_bbox(spatialized.kr.sf)[[3]],
sf::st_bbox(spatialized.kr.sf)[[4]]
) %>%
# adding layer control button
leaflet::addLayersControl(
baseGroups = c("Satellite","Stamen"),
# overlayGroups = c("prediction"),
overlayGroups = c("response"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# fullscreen button
leaflet.extras::addFullscreenControl() %>%
# location button
leaflet::addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
$('head').append(",responsiveness,");
}")
) %>%
# admin boundaries
# predictions
leaflet::addPolygons(
group = "response",
color = "#444444", stroke = FALSE, weight = 1, smoothFactor = 0.8,
opacity = 1.0, fillOpacity = 0.6,
fillColor = ~tractionPal(traction.kr),
label = ~ paste(
"prediction:", format(round(spatialized.kr.sf$traction.kr, 2), nsmall = 2)),
# popup = ~as.character(traction.kr),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)
) %>%
#legend
leaflet::addLegend(
position = "bottomright", pal = tractionPal, values = ~traction.kr,
title = "traction",
group = "response",
opacity = 1
)
head(spatialized.kr.sf)
mapview::mapview(spatialized.kr.sf)
mapview::mapview(spatialized.kr.sf["traction.kr"])
head(interpolation.grid.pixels.sf)
knitr::opts_chunk$set(echo = TRUE)
# making the pixel grid from scratch
interpolation.grid.sf = sf::st_make_grid(x = sf::st_transform(shapefile, crs = 4326),  cellsize = 10, what = "polygons")
# making the pixel grid from scratch
interpolation.grid.sf = sf::st_make_grid(x = sf::st_transform(shapefile, crs = 3812),  cellsize = 10, what = "polygons")
# making the pixel grid from scratch
interpolation.grid.pixels.sf = sf::st_make_grid(x = sf::st_transform(shapefile, crs = 3812),  cellsize = 10, what = "polygons")
# projecting in the 4326 CRS
interpolation.grid.pixels.sf = sf::st_transform(interpolation.grid.pixels.sf, 3812)
# adding the predictions to the grid squares object
spatialized.kr.2.sf = interpolation.grid.pixels.sf %>%
dplyr::bind_cols(spatialized.kr.sf)
head(interpolation.grid.pixels.sf)
nrow(interpolation.grid.pixels.sf)
# Building a grid of pixels of 10 mÂ² that spatially matches our grid of centers. To do so, we must work with projected data (to define the cellsize)
interpolation.grid.pixels.sf = sf::st_sf(sf::st_make_grid(x = sf::st_transform(shapefile, crs = 3812),  cellsize = 10, what = "polygons"))
nrow(interpolation.grid.pixels.sf)
# adding the predictions to the grid squares object
spatialized.kr.2.sf = interpolation.grid.pixels.sf %>%
dplyr::bind_cols(spatialized.kr.sf)
mapview::mapview(spatialized.kr.2.sf["traction.kr"])
head(spatialized.kr.2.sf["traction.kr"])
# adding the predictions to the grid squares object
spatialized.kr.sf = interpolation.grid.pixels.sf %>%
dplyr::bind_cols(spatialized.kr.sf)
sf::st_crs(shapefile)
# transforming to 4326
spatialized.kr.sf = sf::st_transform(spatialized.kr.sf, 4326)
# intersecting with shapefile
spatialized.kr.sf =  sf::st_intersection(spatialized.kr.sf, shapefile)
# mapping
mapview::mapview(spatialized.KR.sf["traction.kr"])
# mapping
mapview::mapview(spatialized.kr.sf["traction.kr"])
mapview::mapview(spatialized.kr.sf["traction.kr"])
# to make the map responsive
responsiveness = "\'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\'"
# defining the color palette for traction
tractionPal = leaflet::colorNumeric(
palette = "RdYlBu", #"RdBl",
reverse = TRUE,
domain = spatialized.kr.sf$traction.kr, #spatialized$response,
na.color = "black"
)
traction.map = leaflet::leaflet(spatialized.kr.sf) %>%
# basemaps
leaflet::addProviderTiles(group = "Satellite",
providers$Esri.WorldImagery,
options = providerTileOptions(opacity = 1)
) %>%
leaflet::addProviderTiles(group = "Stamen",
providers$Stamen.Toner,
options = providerTileOptions(opacity = 0.25)
) %>%
# centering the map
leaflet::fitBounds(sf::st_bbox(spatialized.kr.sf)[[1]],
sf::st_bbox(spatialized.kr.sf)[[2]],
sf::st_bbox(spatialized.kr.sf)[[3]],
sf::st_bbox(spatialized.kr.sf)[[4]]
) %>%
# adding layer control button
leaflet::addLayersControl(
baseGroups = c("Satellite","Stamen"),
# overlayGroups = c("prediction"),
overlayGroups = c("response"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# fullscreen button
leaflet.extras::addFullscreenControl() %>%
# location button
leaflet::addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
$('head').append(",responsiveness,");
}")
) %>%
# admin boundaries
# predictions
leaflet::addPolygons(
group = "response",
color = "#444444", stroke = FALSE, weight = 1, smoothFactor = 0.8,
opacity = 1.0, fillOpacity = 0.6,
fillColor = ~tractionPal(traction.kr),
label = ~ paste(
"prediction:", format(round(spatialized.kr.sf$traction.kr, 2), nsmall = 2)),
# popup = ~as.character(traction.kr),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)
) %>%
#legend
leaflet::addLegend(
position = "bottomright", pal = tractionPal, values = ~traction.kr,
title = "traction",
group = "response",
opacity = 1
)
traction.map
dataset = read.csv(file = "./raw-data/tracteur.csv", header = TRUE,sep = ";" )
shapefile = sf::st_read(dsn = "./raw-data/shapefile/reves_WGS84.shp")
# transforming to spatial sf object
dataset.sf = sf::st_as_sf(dataset, coords = c("long_deg", "lat_deg"))
# transforming to spatial sf object
dataset.sf = sf::st_as_sf(dataset, coords = c("long_deg", "lat_deg"))
# setting the CRS (coordinate reference system)
dataset.sf = sf::st_set_crs(dataset.sf, 4326)
# instersecting
dataset.sf = sf::st_intersection(dataset.sf, shapefile)
# solution to remove duplicate locations
dataset.sp = as(dataset.sf, "Spatial")[-sp::zerodist(as(dataset.sf, "Spatial"))[,1],]
dataset.sf = sf::st_as_sf(dataset.sp)
# making it projected instead of coordinates (for interpolation) and tranforming to dataframe
dataset = sf::st_transform(dataset.sf, 3812)
coordinates = data.frame(sf::st_coordinates(dataset))
sf::st_geometry(dataset) = NULL
# putting coordinates in the dataframe
dataset = dataset %>%
dplyr::bind_cols(coordinates)
# renaming X and Y to x and y for gstat learner to work
dataset = dataset %>%
dplyr::rename(x = X) %>%
dplyr::rename(y = Y)
# plotting the map
plot(sf::st_as_sf(dataset, coords = c("y","x"))["traction"])
# normalization with boxcox
# https://github.com/petersonR/bestNormalize
dataset = dataset %>%
dplyr::mutate(traction_m = traction + abs(min(traction)) + 1)
traction.bcn = bestNormalize::boxcox(dataset$traction_m)
traction.bcn.d = density(traction.bcn$x.t)
plot(traction.bcn.d)
dataset = dataset %>%
dplyr::bind_cols(traction.bcn = data.frame(traction.bcn$x.t)) %>%
dplyr::rename(traction.norm = traction.bcn.x.t)
# plot the map
plot(sf::st_as_sf(dataset, coords = c("y","x"))["traction.norm"])
# defining the poly2 plan model
traction.poly2 = spatial::surf.ls(np = 2, x = dataset$x, y = dataset$y, z = dataset$traction.norm)
# poly2 predictions at observations
traction.poly2.preds = predict(object = traction.poly2, x = dataset$x, y = dataset$y)
# data - trend for residuals
traction.poly2.res = dataset$traction.norm - traction.poly2.preds
# adding to dataset
dataset = dataset %>%
dplyr::bind_cols(traction.norm.res = traction.poly2.res )
# plot the map
plot(sf::st_as_sf(dataset, coords = c("y","x"))["traction.norm.res"])
# dataset as spatial object class sp
dataset.sf = dataset
dataset.sf = sf::st_as_sf(dataset.sf, coords = c("y", "x"))
dataset.sf = sf::st_set_crs(dataset.sf, 3812)
coordinates = data.frame(sf::st_coordinates(dataset.sf))
# putting coordinates in the dataframe ::FIXEME:: maybe useless
dataset.sf = dataset.sf %>%
dplyr::bind_cols(coordinates)
# renaming X and Y to x and y for gstat learner to work
dataset.sf = dataset.sf %>%
dplyr::rename(x = X) %>%
dplyr::rename(y = Y)
plot(dataset.sf["traction.norm.res"] )
sp::spplot(dataset.sp["traction.norm.res"])
colnames(dataset.sp@data)
colnames(dataset.sf)
dataset.sp = as(dataset.sf, "Spatial")
colnames(dataset.sp@data)
sp::spplot(dataset.sp["traction.norm.res"])
# making and plotting the variogram
traction.norm.res.vgm = gstat::variogram(traction.norm.res~1, dataset.sp)
# making and plotting the variogram
traction.norm.res.vgm = gstat::variogram(traction.norm.res~1, dataset.sp)
plot(traction.norm.res.vgm)
# manually fitting a model to the vgm with constant mean
# https://gisgeography.com/semi-variogram-nugget-range-sill/
traction.norm.res.fit = gstat::fit.variogram(
object = traction.norm.res.vgm,
model = gstat::vgm(
psill = 0.9, model = "Sph", range =  150, nugget = 0.7))
plot(traction.norm.res.vgm, traction.norm.res.fit)
# remaking the grid from scratch
interpolation.grid.sf = sf::st_make_grid(x = sf::st_transform(shapefile, crs = 3812),  cellsize = 10, what = "centers")
# converting the interpolation grid to normal dataframe
interpolation.grid = interpolation.grid.sf
# making it projected instead of coordinates
interpolation.grid = sf::st_transform(interpolation.grid, 3812)
coordinates = data.frame(sf::st_coordinates(interpolation.grid))
# putting coordinates in the dataframe
interpolation.grid = coordinates
# renaming X and Y to x and y for gstat learner to work
interpolation.grid  = interpolation.grid  %>%
dplyr::rename(x = X) %>%
dplyr::rename(y = Y) %>%
dplyr::bind_cols(coordinates)
interpolation.grid.sf = sf::st_as_sf(interpolation.grid, coords = c("Y", "X"))
interpolation.grid.sf = sf::st_set_crs(interpolation.grid.sf, 3812)
interpolation.grid.sp = as(interpolation.grid.sf, "Spatial")
sp::gridded(interpolation.grid.sp) = TRUE
# interpolating the residuals
# to solve the memory error  => https://github.com/edzer/gstat/issues/6
# https://gis.stackexchange.com/questions/245295/error-in-kriging-function
traction.norm.res.kr = gstat::krige(
traction.norm.res~1,
dataset.sp,
interpolation.grid.sp,
model = traction.norm.res.fit,
maxdist = 30)
# interpolating the residuals
# to solve the memory error  => https://github.com/edzer/gstat/issues/6
# https://gis.stackexchange.com/questions/245295/error-in-kriging-function
traction.norm.res.kr = gstat::krige(
traction.norm.res~1,
dataset.sp,
interpolation.grid.sp,
model = traction.norm.res.fit,
maxdist = 30)
traction.norm.res.kr.sf = sf::st_as_sf(traction.norm.res.kr)
# plotting the interpolation of the residuals
traction.norm.res.kr.plot = sp::spplot(traction.norm.res.kr["var1.pred"], do.log = F, colorkey = TRUE)
traction.norm.res.kr.plot
# poly2 predictions at prediction grid points locations
traction.poly2.grid.preds = predict(
object = traction.poly2,
x = data.frame(interpolation.grid.sp)$x,
y = data.frame(interpolation.grid.sp)$y)
# Addition of prediction of kriging of residuals and polynomial2 trend predictions at grid points locations
traction.norm.kr = data.frame(traction.norm.res.kr["var1.pred"]) + traction.poly2.grid.preds
# denormalizing the data by performing reverse transformation
traction.kr =  predict(traction.bcn, newdata = traction.norm.kr$var1.pred, inverse = TRUE)
traction.kr = data.frame(traction.kr = traction.kr)
head(traction.kr)
summary(traction.kr)
# to get back to the original data
traction.kr = traction.kr %>%
dplyr::mutate(traction.kr = traction.kr - (abs(min(dataset$traction))) - 1)
# joining to the spatial object
spatialized.kr = interpolation.grid %>%
dplyr::bind_cols(traction.kr)
spatialized.kr.sf = sf::st_as_sf(spatialized.kr, coords = c("Y", "X"))
plot(spatialized.kr.sf["traction.kr"])
spatialized.kr.sf = sf::st_set_crs(spatialized.kr.sf, 3812)
spatialized.kr.sf = sf::st_transform(spatialized.kr.sf, 4326)
# Building a grid of pixels of 10 mÂ² that spatially matches our grid of centers. To do so, we must work with projected data (to define the cellsize)
interpolation.grid.pixels.sf = sf::st_sf(sf::st_make_grid(x = sf::st_transform(shapefile, crs = 3812),  cellsize = 10, what = "polygons"))
# adding the predictions to the grid squares object
spatialized.kr.sf = interpolation.grid.pixels.sf %>%
dplyr::bind_cols(spatialized.kr.sf)
# transforming to 4326
spatialized.kr.sf = sf::st_transform(spatialized.kr.sf, 4326)
# intersecting with shapefile
spatialized.kr.sf =  sf::st_intersection(spatialized.kr.sf, shapefile)
# mapping
mapview::mapview(spatialized.kr.sf["traction.kr"])
# to make the map responsive
responsiveness = "\'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\'"
# defining the color palette for traction
tractionPal = leaflet::colorNumeric(
palette = "RdYlBu", #"RdBl",
reverse = TRUE,
domain = spatialized.kr.sf$traction.kr, #spatialized$response,
na.color = "black"
)
traction.map = leaflet::leaflet(spatialized.kr.sf) %>%
# basemaps
leaflet::addProviderTiles(group = "Satellite",
providers$Esri.WorldImagery,
options = providerTileOptions(opacity = 1)
) %>%
leaflet::addProviderTiles(group = "Stamen",
providers$Stamen.Toner,
options = providerTileOptions(opacity = 0.25)
) %>%
# centering the map
leaflet::fitBounds(sf::st_bbox(spatialized.kr.sf)[[1]],
sf::st_bbox(spatialized.kr.sf)[[2]],
sf::st_bbox(spatialized.kr.sf)[[3]],
sf::st_bbox(spatialized.kr.sf)[[4]]
) %>%
# adding layer control button
leaflet::addLayersControl(
baseGroups = c("Satellite","Stamen"),
# overlayGroups = c("prediction"),
overlayGroups = c("response"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# fullscreen button
leaflet.extras::addFullscreenControl() %>%
# location button
leaflet::addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
$('head').append(",responsiveness,");
}")
) %>%
# admin boundaries
# predictions
leaflet::addPolygons(
group = "response",
color = "#444444", stroke = FALSE, weight = 1, smoothFactor = 0.8,
opacity = 1.0, fillOpacity = 0.6,
fillColor = ~tractionPal(traction.kr),
label = ~ paste(
"prediction:", format(round(spatialized.kr.sf$traction.kr, 2), nsmall = 2)),
# popup = ~as.character(traction.kr),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)
) %>%
#legend
leaflet::addLegend(
position = "bottomright", pal = tractionPal, values = ~traction.kr,
title = "traction",
group = "response",
opacity = 1
)
traction.map
